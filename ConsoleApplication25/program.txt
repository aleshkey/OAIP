#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
int n;

vector<char> cl;
vector<int> p;
int cycle_st, cycle_end;

bool dfs(int v, vector <vector<int>> g) {
	cl[v] = 1;
	for (size_t i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if (cl[to] == 0) {
			p[to] = v;
			if (dfs(to, g))  return true;
		}
		else if (cl[to] == 1) {
			cycle_end = v;
			cycle_st = to;
			return true;
		}
	}
	cl[v] = 2;
	return false;
}

int main() {
	int x, nach, obhvat =1;
	vector<int> k;
	vector<int> b;
	ifstream fin; fin.open("input.txt");
	if (fin.is_open()) {
		while (!fin.eof()) {
			fin >> x;
			k.push_back(x);
		}
	}
	x = k.size();
	int q = 0;
	int n = round(sqrt(x));
	vector<vector<int>> a(n);
	vector<vector<int>> g(n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			a[i].push_back(k[q]);
			q++;
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (a[i][j] == 1) {
				g[i].push_back(j);
			}
		}
	}

	p.assign(n, -1);
	cl.assign(n, 0);
	cycle_st = -1;
	for (int i = 0; i < n; ++i)
		if (dfs(i, g))
			break;

	if (cycle_st == -1)
		puts("Acyclic");
	else {
		puts("Cyclic");
		vector<int> cycle;
		cycle.push_back(cycle_st);
		for (int v = cycle_end; v != cycle_st; v = p[v])
			cycle.push_back(v);
		cycle.push_back(cycle_st);
		reverse(cycle.begin(), cycle.end());
		for (size_t i = 0; i < cycle.size(); i++)
			printf("%d ", cycle[i]);
		nach = cycle[0];
		for (int i = 1; i < cycle.size(); i++) {
			if (cycle[i] == nach) {
				cout <<"\nobhvat = "<< obhvat;
			}
			else obhvat++;
		}
	}
}